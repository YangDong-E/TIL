ESNext 자바스크립트와 타입스크립트는 function 키워드가 아닌 => 기호로 만드는 화살표 함수도 제공한다.

ex)
const 함수 이름 = (매개변수1: 타입1, 매개변수2: 타입2[, ...]) : 반환 타입 => 함수 몸통

화살표 함수의 몸통은 function 때와는 다르게 다음처럼 중괄호를 사용할 수도 있고 생략할 수 있다.

ex)

const arrow1 = (a: number, b: number): number => {return a + b} // 실행문 방식 몸통
const arrow2 = (a: number, b: number): number => a + b          // 표현식 문 방식 몸통

중괄호 사용 여부에 따라 타입스ㅡ립트 문법이 동작하는 방식이 실행문 방식과 표현식 문 방식으로 달라진다.



1. 실행문과 표현식 문

프로그래밍 언어는 실행문 지향 언어와 표현식 지향 언어로 구분되어 있는데, ESNext와 타입스크립트는 실행문과 표현식 문을 동시에 지원한다.
이러한 언어를 '다중 패러다임 언어'라고 한다.

프로그래밍 언어에서 실행문은 CPU에서 실행되는 코드를 의미한다. 
하지만 CPU에서는 실행만 될 뿐 결과를 알려주지 않기 때문에 실행문이 실행된 결과를 알려면 반드시 함수 몸통에서만 사용이 가능한 return 키워드를 사용해야 한다.
반면 표현식 문은 CPU에서 실행된 결과를 굳이 return 키워드를 사용하지 않아도 알려준다.

ex 1)

// 실행문 예시
let x
x = 1


ex 2)

let x = 10
if(x>10)    // CPU가 평가한 후 true나 false라는 값으로 결과를 알려주지 않으면 if문이 정상적으로 동작할 수 없다.
x = 1


ex 3)


// 코드 작성이 번거로운 프로그래밍 문법
if(return x > 0)
x = 1


즉, 똑같이 CPU에서 실행되는 구문이더라도 x > 0 처럼 return 키워드 없이 결괏값을 반환하는 실행문이 필요하다.
이것을 '표현식 문'이라고 구분해서 부른다.




2. 복합 실행문

프로그래밍 언어에서 if와 같은 구문은 다음처럼 조건을 만족하면 단순히 한 줄의 실행문만을 실행하는 형태로 설계한다.

ex)

if(조건식)
    실행문

하지만 이러한 설계가 가능한 이유는 복합 실행문이라는 또 다른 형태를 함께 제공하기 때문인데, 대부분 언어에서 복합 실행문은 중괄호 {}를 사용하여 이용한다.

ex)
if(조건식){
    실행문1
    실행문2
}

ex)

function f(){
    let x = 1, y = 2
    let result = x + y + 10
}

이렇게 작성을하면 컴파일러로 하여금 여러 실행문을 한 줄의 실행문으로 인식하게 한다.

또한 복합실행문은 변수의 유효 범위도 지역범위(local scope)로 제한하므로, 각 함수의 몸통에서만 유효하므로 두 함수간 간섭은 없다.




3. 표현식 문 스타일의 화살표 함수 구현

function 스타일 함수 isGreater를 화살표 함수로 구현

ex)

const isGreater = (a: number, b: number): boolean => {
    return a > b;
}


// ESNext와 타입스크립트에서 구현할 수 있는 방법

const isGreater = (a: number, b: number): boolean => a > b
// 함수 몸통이 표현식으로 구현되어 있기 때문에 return 키워드가 생략이 되었다. 키워드를 작성하면 오류 발생
// 하지만 return 키워드를 사용하고 싶으면 중괄호 {}로 복합 실행문을 만든 뒤 {return a > b}로 사용하면 된다.


ES5 자바스크립트에서는 모든 문장 끝에 세미콜론(;)이 있어야 한다. 하지만 ESNext와 타입스크립트에서는 세미콜론을 생략할 수 있다.
또한 타입스크립트에서는 관습적으로 표현식 문에는 세미콜론을 붙이지 않는다.