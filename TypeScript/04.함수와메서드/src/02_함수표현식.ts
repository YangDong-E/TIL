1. 함수는 객체다

자바스크립트는 함수형 언어 '스킴'과 프로토타입 기반 객체지향 언어 '셀프'를 모델로 만들어 졌다.
그로인해 자바스크립트는 객체지향 언어와 함수형 언어의 특징이 모두 있다.
타입스크립트 또한 자바스크립트의 이런특징을 모두 포함한다. 

자바스크립트에서 함수는 Function 클래스의 인스턴스인데,

ex 1)

let add = new Function('a','b', 'return a+b')
let result = add(1,2)
console.log(result) // 3

첫번째 행에서 add가 함수라면 아래 코드와 같이 작성이 되어야하는데, 변수 선언문 형태로 구현이 되었다.

ex 2)

function add(a,b) {return a+b}

함수는 아래와 같은 방법으로도 구현할 수 있다.

ex 3)

let add2 = function(a,b) {return a+b}
console.log(add2(1,2))  // 3

이렇게 함수 선언문에서 함수 이름을 제외한 function(a,b) {return a+b}와 같은 코드를 변수에 값처럼 대입을 하는데, 이것을 함수 표현식이라고 한다.

이러한 함수 표현식은 함수형 언어의 핵심 기능이다.



2. 일등 함수

일등함수란?

함수와 변수를 구분 하지 않는다는 의미이다.

ex)

let f = function(a,b) {return a+b}
f = function(a,b) {return a-b}

이 코드와 같이 f는 let 키워드가 앞에 있으므로 변수이므로 값을 저장할 수 있는데 첫 번째 값으로는 a+b 형태의 함수 표현식을 저장했다.
하지만 f는 변수이므로 a-b 형태의 함수 표현식도 저장을 할 수 있다.

이처럼 f가 변수인지 함수인지 사실상 구분을 할 수가 없는데 이것을 변수와 함수를 차별하지 않는다는 의미로 일등함수 기능을 제공하는 것이다.


프로그래밍 언어가 일등 함수 기능을 제공하면 '함수형 프로그래밍 언어'라고 한다.
자바스크립트와 타입스크립트는 일등 함수 기능이 있으므로 함수형 프로그래밍 언어이다.



3. 함수 호출 연산자

어떤 변수가 함수 표현식을 값으로 담고 있다면, 변수 이름 뒤에 '함수 호출 연산자()'를 붙여서 호출할 수 있다.
함수 호출이란 함수 표현식의 몸통 부분을 실행한다는 뜻이다.

ex)

let functionExpression = function(a,b) {return a+b}
let value = functionExpression(1,2)     // 3

이처럼 functionExpression 변수는 function(a,b) {return a+b}라는 함수 표현식을 담고있으므로
변수 이름 뒤에 함수 호출 연산자인 () 안에 1,2라는 값을 넣어 functionExpression(1,2)라는 함수 호출문을 만들어서 값을 내었다.



4. 익명함수 

함수 표현식은 대부분 언어에서 언급되는 익명함수의 다른 표현이며, 이름 그대로의 '이름이 없는 함수'로 이해하면 동작 원리를 쉽게 가늠하기 어렵다.

ex 1)

let value = (function(a,b) {return a+b;})(1,2)  // 3


let value = 
(function(a,b) {return a+b;})
(1,2)  // 3
이러한 형태를 가진 함수를 익명 함수라고 하는데 연산자 우선순위를 고려해 코드를 분해하는 것이 핵심이다.
하지만 function(a,b) {return a+b}를 감싸고 있는 () 함수 호출 연산자는 우선순위가 매우 높으므로 함수 표현식 부분을 소괄호로 묶어 컴파일러가 정상적으로 함수 표현식의 시작과 끝 부분을 알수 있게 해야 한다.



5. const 키워드와 함수 표현식

함수 표현식을 담는 변수는 let 보다 const 키워드로 선언하는 것이 바람직한데,
그 이유는 let 키워드는 변숫값이 변할 수 있으므로 const를 사용하여 함수 내용이 이후에 저래돌 바뀔 수 없게 하는 것이 바람직하다.

ex)

let f = () => {} // 값이 변할 수 있음

const f = () => {} // 값이 변하지 않음