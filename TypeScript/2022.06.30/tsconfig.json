{
    // tsc 명령 형식에서 옵션을 나타낸다.
    "compilerOptions": {
        // 동작 대상 플랫폼이 웹 브라우저( "amd" )인지 Node.js( "commonjs" )인지를 구분해 그에 맞는 모듈 방식으로 컴파일 하려는 목적으로 설정
        "module": "commonjs",
        // 오픈소스 자바스크립트 라이브러리 중 웹 브라우저에서 동작한다는 가정으로 만들어진 것이 있는데,
        // 이것들은 CommonJS 방식으로 동작하는 타입스크립트 코드에 혼란을 줄 수 있다.
        // 예시로 chance 라이브러리가 AMD 방식으로 구현된 라이브러리인데 이 패키지가 동작하기 위해서는 이 키값을 true로 설정해야한다.
        "esModuleInterop": true,
        // 트랜스파일할 대상 자바스크립트의 버전을 설정한다. 대부분 ex5로 설정하지만 최신 버전의 Node.js를 사용한다면 es6을 설정할 수 있다.
        "target": "es5",
        // moudle 키의 값이 commonjs이면 이 값은 항상 node로 설정하고, 키 값이 amd이면 classic으로 설정한다.
        "moduleResolution": "node",
        // baseUrl 과 outDir은 트랜스파일된 ES5 자바스크립트 파일을 저장하는 디렉터리를 설정
        // baseUrl 설정값을 기준으로 하위 디렉터리의 이름, 키 값을 dist를 설정했으므로 빌드된 결과가 dist 디렉터리에 만들어진다.
        "outDir": "dist",
        // tsc는 tsconfig.json 파일이 있는 디렉터리에서 실행되기 때문에 보통 baseUrl 값은 "."으로 설정한다.
        "baseUrl": ".",
        // 이 값이 true이면 트랜스파일 디렉터리는 .js 파일 외에도 .js.map 파일이 만들이진다.
        // 이 소스맵 파일은 변환된 자바스크립트 코드가 타입스크립트 코드의 어디에 해당하는지 알려주기 때문에 소스맵 파일은 주로 디버깅할 때 사용된다.
        "sourceMap": true,
        // 타입스크립트에는 생성자(generator)라는 구문이 있는데 이 구문을 정상적으로 동작시키기 위해서는 키값을 반드시 true로 설정해야한다.
        "downlevelIteration": true,
        // 타입스크립트 컴파일러는 기본적으로 타입을 명시하지 않으면 any타입을 설정한 것으로 간주하는데, 이 오류 메시지의 의미가 직관적이지 않기 때문에 혼란을 줄이고자
        // 이 키값을 flase로 지정하여 타입을 지정하지 않더라도 문제로 인식하지 않게 하였다.
        "noImplicitAny": false,
        // 소스 파일의 import 문에서 from 부분을 해설할 때 찾아야하는 디렉터리를 설정
        "paths": {
            "*": [
                // import 문이 찾아야하는 소스가 외부 패키지이면 node_modules에서 찾아야 하기 때문에 "node_modeuls/*" 키값도 포함 
                "node_modules/*"
            ]
        }
    },
    // 대상 파일 목록을 나타낸다.
    "include": [
        // src 디렉터리는 물론 src의 하위 디렉터리에 있는 모든 파일을 컴파일 대상으로 포함한다는 의미
        "src/**/*"
    ]
}